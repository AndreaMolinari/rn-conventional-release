name: Conventional React Native Release
description: automatic tag and release with standard version

author: Andrea Molinari
branding:
  color: green
  icon: archive

inputs:
  token:
    required: true
    description: Repo github token
  pre-release-name:
    description: >
      string: Your version name (aplha|beta|rc)

      - *any_val* standard version --prerelease any_val

      - *rc* standard version --prerelease

      - *new* standard version

    required: false
    default: "new release"
  pre-release-github:
    description: "bool: Mark GitHub release as pre-release"
    required: false
  draft:
    description: "bool: Is draft"
    required: false
  first-release:
    description: "bool: Create first release"
    required: false
    # default: "false"
  release-as:
    description: "string: Release as specific version"
    required: false
  upgrade-app-version:
    description: "android|ios|both|none"
    required: false
    default: "none"

outputs:
  tag_name:
    description: tag appena generato
    value: ${{ steps.get-latest-tag.outputs.tag }}
  release_id:
    description: release_id
    value: ${{ steps.get-release-id.outputs.id }}

runs:
  using: "composite"

  steps:
    # - name: simpa
    #   shell: bash
    #   run: echo "${{ toJson(github) }}"

    - shell: bash
      name: Check Input Type
      id: check_input
      run: |
        # ?? Questo step può andare in una action di questo progetto?
        # if [[ ${{ inputs.first-release }} =~ ^[0-9]+$ ]]; then
        #   echo "my_input is a number."
        #   echo "::set-output name=input_type::number"
        if [ ${{ inputs.pre-release-github }} == "true" ]; then
          echo "IS_PRE_RELEASE=true" >> "$GITHUB_ENV"
        else
          echo "IS_PRE_RELEASE=false" >> "$GITHUB_ENV"
        fi
        if [ ${{ inputs.draft }} == "true" ]; then
          echo "IS_DRAFT_RELEASE=true" >> "$GITHUB_ENV"
        else
          echo "IS_DRAFT_RELEASE=false" >> "$GITHUB_ENV"
        fi

    - shell: bash
      run: echo "COMMAND=npx standard-version" >> "$GITHUB_ENV"

    - shell: bash
      if: inputs.first-release == 'true'
      run: echo "COMMAND=${{env.COMMAND}} --first-release" >> "$GITHUB_ENV"

    - shell: bash
      if: inputs.pre-release-name == 'rc'
      run: echo "COMMAND=${{env.COMMAND}} --prerelease" >> "$GITHUB_ENV"

    - shell: bash
      if: inputs.pre-release-name == 'alpha' || inputs.pre-release-name == 'beta'
      run: echo "COMMAND=${{env.COMMAND}} --prerelease ${{ inputs.pre-release-name }}" >> "$GITHUB_ENV"

    - shell: bash
      if: inputs.release-as != ''
      run: echo "COMMAND=${{env.COMMAND}} --release-as ${{ inputs.release-as }}" >> "$GITHUB_ENV"

    - shell: bash
      id: check-node
      run: |
        if type node > /dev/null 2>&1 && which node > /dev/null 2>&1 ;then
          echo "install-node=false" >> "$GITHUB_OUTPUT"
        else
          echo "install-node=true" >> "$GITHUB_OUTPUT"
        fi

    - name: GitHub user config
      shell: bash
      run: |
        git config user.email "[bot]andrea-molinari@github-action.com"
        git config user.name "[bot] Andrea Molinari"

    - if: steps.check-node.outputs.install-node == true
      uses: actions/setup-node@v3

    - name: Execute standard-version
      shell: bash
      run: ${{env.COMMAND}}

    - if: inputs.upgrade-app-version != 'none'
      uses: ./.github/actions/upgrade-apps #? In test

    - uses: ad-m/github-push-action@v0.6.0
      id: create-tag
      with:
        github_token: ${{ inputs.token }}
        tags: true
        branch: ${{ github.ref }}

    # forse il tag devo crearlo a mano per poter aggiungere cose prima di pushare

    - uses: actions-ecosystem/action-get-latest-tag@v1
      id: get-latest-tag

    # - MARK: Create release from latest tag
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        tag_name: ${{ steps.get-latest-tag.outputs.tag }}
        release_name: ${{ steps.get-latest-tag.outputs.tag }}
        draft: ${{env.IS_DRAFT_RELEASE}}
        prerelease: ${{env.IS_PRE_RELEASE}}
        body_path: ./CHANGELOG.md

    - uses: cardinalby/git-get-release-action@v1
      id: get-release-id
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        tag: ${{ steps.get-latest-tag.outputs.tag }}
